#!/usr/bin/python3
import argparse
from rivuletpy.rtrace import main, show_logo

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Arguments to perform the Rivulet2 tracing algorithm.')
    parser.add_argument(
        '-f',
        '--file',
        type=str,
        default=None,
        required=True,
        help='The input file. A image file (*.tif, *.nii, *.mat).')
    parser.add_argument(
        '-o',
        '--out',
        type=str,
        default=None,
        required=False,
        help='The name of the output file')
    parser.add_argument(
        '-t',
        '--threshold',
        type=float,
        default=0,
        help='threshold to distinguish the foreground and background. Default 0. If threshold<0, otsu will be used.'
    )
    parser.add_argument(
        '-z',
        '--zoom_factor',
        type=float,
        default=1.,
        help='The factor to zoom the image to speed up the whole thing. Default 1.')

    # Arguments for soma detection
    parser.add_argument('--save-soma', dest='save_soma', action='store_true',
                        help="Save the automatically reconstructed soma volume along with the SWC.")
    parser.add_argument('--no-save-soma', dest='save_soma', action='store_false',
                        help="Don't save the automatically reconstructed soma volume along with the SWC (default)")
    parser.set_defaults(save_soma=False)

    # Args for tracing
    parser.add_argument('--speed', dest='speed', action='store_true',
                        help="Use the input directly as speed image")
    parser.set_defaults(speed=False)

    parser.add_argument('--quality', dest='quality', action='store_true',
                        help="Reconstruct the neuron with higher quality and slightly more computing time")
    parser.add_argument('--no-quality', dest='quality', action='store_false',
                        help="Reconstruct the neuron with lower quality and slightly more computing time")
    parser.set_defaults(quality=False)

    parser.add_argument('--clean', dest='clean', action='store_true',
                        help="Remove the unconnected segments (default). It is relatively safe to do with the "
                             "Rivulet2 algorithm")
    parser.add_argument('--no-clean', dest='clean', action='store_false',
                        help="Keep the unconnected segments")
    parser.set_defaults(clean=True)

    parser.add_argument('--non-stop', dest='non_stop', action='store_true',
                        help="Whether to ignore the stopping criteria & just keep going no matter what. This is only "
                             "used when you are sure all the positive voxels should belong to the structures of "
                             "interests.")
    parser.set_defaults(non_stop=False)

    parser.add_argument('--npush', dest='npush', type=int,
                        default=0,
                        help="Number of iterations for pushing the centerline nodes to the center with the binary map "
                             "boundaries. This is a post-processing step not nessensary for all the applications. "
                             "When the number of steps increases, each node will be closer to the center locally and "
                             "the curves will be less smoother.")

    # MISC
    parser.add_argument('--silent', dest='silent',
                        action='store_true', help="Omit the terminal outputs")
    parser.add_argument('--no-silent', dest='silent', action='store_false',
                        help="Show the terminal outputs & the nice logo (default)")
    parser.set_defaults(silent=False)
    parser.add_argument('--skeletonize', dest='skeletonize',
                        action='store_true',
                        help="Preprocessing with skelontonization on the segmentation first before tracing. "
                             "Recommended for structures with large diameter variance.",
                        default=False)

    parser.add_argument('-v', '--view', dest='view', action='store_true',
                        help="View the reconstructed neuron when rtrace finishes")
    parser.add_argument('--no-view', dest='view', action='store_false')
    parser.set_defaults(view=False)

    parser.add_argument('--tracing_resolution', type=float, required=False,
                        help='Only valid for input files compatible with ITK. Will resample the image array into '
                             'isotropic resolution before tracing. Default 1mm',
                        default=1.)
    parser.add_argument('--vtk', action='store_true',
                        help="Store the world coordinate vtk format along with the swc", default=False)
    parser.add_argument('--slicer', action='store_true',
                        help="Whether to save vtk coordinates in RAS space that can be rendered in 3D Slicer",
                        default=False)

    args = parser.parse_args()

    if not args.silent:
        show_logo()

    main(file=args.file, out=args.out, threshold=args.threshold, zoom_factor=args.zoom_factor,
         save_soma=args.save_soma, speed=args.speed, quality=args.quality, clean=args.clean,
         non_stop=args.non_stop, npush=args.npush, silent=args.silent, skeletonize=args.skeletonize,
         view=args.view, tracing_resolution=args.tracing_resolution, vtk=args.vtk, slicer=args.slicer)
