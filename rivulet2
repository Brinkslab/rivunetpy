#!/usr/bin/python3

import argparse
import nibabel as nib

from rivuletpy.trace import *
from rivuletpy.utils.preprocessing import *
from rivuletpy.utils.io import *
from filtering.anisotropic import response
from filtering.morphology import ssm

parser = argparse.ArgumentParser(description='Arguments for see anisotropic filters.')
parser.add_argument('--file', type=str, default=None, required=True, help='The file to filter')
parser.add_argument('--threshold', type=float, default=-1, help='threshold to distinguish the foreground and background; works on filtered image if --filter is enabled')
parser.add_argument('--soma_threshold', type=float, default=-1, help='The threshold on the original image to get soma radius')

# Arguments for filtering
parser.add_argument('--filter', dest='filter', action='store_true')
parser.add_argument('--no-filter', dest='filter', action='store_false')
parser.set_defaults(filter=False)
parser.add_argument('--filtertype', type=str, default='oof', help='The type of filter to use for filtering images (bg or oof); default: oof')
parser.add_argument('--rlow', type=float, default=1., help='The lower bound of radius to try')
parser.add_argument('--rhigh', type=float, default=2., help='The higher bound of radius to try')
parser.add_argument('--rstep', type=float, default=0.5, help='The step size of trying radius')
parser.add_argument('--rho', type=float, default=0.5, help='The step size of trying radius. Only used if filter type is bg')

# Argument for tracing
parser.add_argument('--trace', dest='trace', action='store_true', help='Run tracing with rivulet 2')
parser.add_argument('--no-trace', dest='trace', action='store_false', help='Skip the tracing with rivulet 2')
parser.set_defaults(trace=True)

parser.add_argument('--radius', dest='radius', action='store_true')
parser.add_argument('--no-radius', dest='radius', action='store_false')
parser.set_defaults(radius=False)


parser.add_argument('--speed', type=str, default='dt', help='The type of speed image to use (dt, ssm, ske, ssmske)')

parser.add_argument('--clean', dest='clean', action='store_true')
parser.add_argument('--no-clean', dest='clean', action='store_false')
parser.set_defaults(clean=True)


# MISC
parser.add_argument('--silence', dest='silence', action='store_true')
parser.add_argument('--no-silence', dest='silence', action='store_false')
parser.set_defaults(silence=False)

parser.add_argument('--render', dest='render', action='store_true')
parser.add_argument('--no-render', dest='render', action='store_false')
parser.set_defaults(render=False)

# Seems not useful
# parser.add_argument('--response_as_speed', dest='response_as_speed', action='store_true')
# parser.add_argument('--no-response_as_speed', dest='response_as_speed', action='store_false')
# parser.set_defaults(response_as_speed=False)

# parser.add_argument('--length', type=int, default=4, help='branches with lengths below this threshold will be abandoned')
args = parser.parse_args()

img = loadimg(args.file)

## Get the soma radius if image is about to be filtered before tracing
if args.trace and args.filter: 
    # Prepare variables for fastmarching
    ## Distance Transform
    if args.soma_threshold < 0:
        try:
            from skimage import filters
        except ImportError:
            from skimage import filter as filters
        args.soma_threshold = filters.threshold_otsu(img)

    if not args.silence: print('--DT to get soma location with threshold:', args.soma_threshold)
    bimg = (img > args.soma_threshold).astype('int') # Segment image
    dt = skfmm.distance(bimg, dx=5e-2) # Boundary DT
    dtmax = dt.max()
    maxdpt = np.asarray(np.unravel_index(dt.argmax(), dt.shape))
    marchmap = np.ones(img.shape)
    marchmap[maxdpt[0], maxdpt[1], maxdpt[2]] = -1
    del bimg


## Filter
if args.filter:
    if not args.silence: print('--Filtering with filter: ', args.filtertype)
    radii = np.arange(args.rlow, args.rhigh, args.rstep)
    img, _, _ = response(img.astype('float'), rsptype=args.filtertype, radii=np.asarray(radii), rho=args.rho, memory_save=False)

    # Save the filtered image by default
    nib.save(nib.Nifti1Image(img, np.eye(4)), '_'.join([args.file,str(args.rlow), str(args.rhigh), 
                            str(args.rstep), str(args.rho), '.rps.nii.gz']))

    if not args.silence: print('--End Filtering: ', args.filtertype)

## Trace
if args.trace:
    ## Distance Transform
    if args.threshold < 0:
        try:
            from skimage import filters
        except ImportError:
            from skimage import filter as filters
        args.threshold = filters.threshold_otsu(img)
        if not args.silence: print('--Otus for threshold: ', args.threshold)
    else:
        print('--Using the user threshold:', args.threshold)

    img = (img > args.threshold).astype('int') # Segment image


    if not args.silence: print('--Boundary DT...')
    dt = skfmm.distance(img, dx=5e-2) # Boundary DT


    if not args.filter: # The soma location and radius can only be used if the image is not filtered (might be hole in soma)
        dtmax = dt.max()
        maxdpt = np.asarray(np.unravel_index(dt.argmax(), dt.shape))
        marchmap = np.ones(img.shape)
        marchmap[maxdpt[0], maxdpt[1], maxdpt[2]] = -1

    if args.speed in ['ssm', 'ssmske']:
        if not args.silence: print('--SSM with GVF...')
        dt = ssm(dt, anisotropic=True, iterations=10)

    if args.speed in ['ske', 'ssmske']:
        if not args.silence: print('--Skelontising...')
        if args.speed == 'ske':
            dt = skeletonize_3d(img > 0)
        elif args.speed == 'ssmske':
            dt = skeletonize_3d(dt > 0.15)

        if not args.silence: print('--Reverse DT...')
        dt = skfmm.distance(np.logical_not(dt), dx=5e-3)
        dt[dt > 0.04] = 0.04
        dt = dt.max() - dt

    # Fast Marching
    if not args.silence: print('--FM...')
    t = skfmm.travel_time(marchmap, makespeed(dt), dx=5e-3)

    # Iterative Back Tracking with Erasing
    if not args.silence: print('--Start Backtracking...')
    swc = iterative_backtrack(t, img, maxdpt, dtmax, render=args.render, silence=args.silence)

    # Clean SWC 
    if args.clean:
        # This will only keep the largest connected component of the graph in swc
        print('Cleaning swc')
        swc = cleanswc(swc, args.radius) 
    elif not args.radius:
        swc[:, 5] = 1

    # Save the final swc
    # Make the long file name
    kvpairs = []
    for key, value in vars(args).items():
        if key is not 'file': kvpairs.append(key + ':' + str(value))
    filename = args.file + '_' + '_'.join(kvpairs) +'.swc'
    saveswc(filename, swc)
