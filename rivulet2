#!/usr/bin/python3

import os, argparse
from rivuletpy.trace import r2
from rivuletpy.utils.io import *
from rivuletpy.soma import *


parser = argparse.ArgumentParser(description='Arguments to perform the Rivulet2 tracing algorithm.')
parser.add_argument('--file', type=str, default=None, required=True, help='The input file. A image file (*.tif, *.nii, *.mat).')
parser.add_argument('--out', type=str, default=None, required=False, help='The name of the output file')
parser.add_argument('--groundtruth', type=str, default=None, required=False, help='The ground truth file. A image file (*.tif, *.nii, *.mat). If given, the precision, recall and F1 will be inserted to the start of the swc file')
parser.add_argument('--threshold', type=float, default=-1, help='threshold to distinguish the foreground and background; works on filtered image if --filter is enabled')

# Arguments for soma detection
parser.add_argument('--soma_threshold', type=float, default=-1, help='The threshold on the original image to get soma radius')
parser.add_argument('--soma_iterations', type=int, default=-1, help='The number of iterations for soma snake')
parser.add_argument('--soma_smoothing', type=int, default=1, help='The number of iterations for making soma a sphere')
parser.add_argument('--soma_lambda1', type=float, default=1, help='The weight of internal energy')
parser.add_argument('--soma_lambda2', type=float, default=1.5, help='The weight of external energy')
parser.add_argument('--somasaveim', dest='soma', action='store_true')
parser.add_argument('--no-somasaveim', dest='soma', action='store_false')
parser.set_defaults(soma=False)
parser.add_argument('--somadetect', dest='soma_detection', action='store_true')
parser.add_argument('--no-somadetect', dest='soma_detection', action='store_false')
parser.set_defaults(soma_detection=False)


# Args for tracing
parser.add_argument('--ssmiter', type=int, default=20, help='The number of iterations to compute GVF for SSM. Default 20')
parser.add_argument('--length', type=int, default=6, help='The length of leaves to prune. Default 6')

parser.add_argument('--radius', dest='radius', action='store_true')
parser.add_argument('--no-radius', dest='radius', action='store_false')
parser.set_defaults(radius=False)

parser.add_argument('--msfm', dest='msfm', action='store_true')
parser.add_argument('--no-msfm', dest='msfm', action='store_false')
parser.set_defaults(msfm=True)

parser.add_argument('--speed', type=str, default='dt', help='The type of speed image to use (dt, ssm)')

parser.add_argument('--clean', dest='clean', action='store_true')
parser.add_argument('--no-clean', dest='clean', action='store_false')
parser.set_defaults(clean=False)

# MISC
parser.add_argument('--silence', dest='silence', action='store_true')
parser.add_argument('--no-silence', dest='silence', action='store_false')
parser.set_defaults(silence=False)

parser.add_argument('--render', dest='render', action='store_true')
parser.add_argument('--no-render', dest='render', action='store_false')
parser.set_defaults(render=False)
args = parser.parse_args()

img = loadimg(args.file)
if args.soma_detection:
    somamask = soma_detect(img, args.threshold, args.soma_smoothing, args.soma_lambda1, args.soma_lambda2, args.soma_iterations)
    # Save the soma mask if required
    if args.soma:
        writetiff3d((os.path.splitext(args.file)[0] + 'soma.tif'), somamask)

# swc = r2(img, args.threshold, args.speed, args.msfm, args.ssmiter, 
	# args.silence, args.clean, args.radius, args.render)

# r2(img, args.threshold, args.speed, args.msfm, args.ssmiter, 
    # args.silence, args.clean, args.radius, args.soma_detection, args.render)

# ## Save the final swc
# if args.out:
#     outswcfile = args.out
# else:
#     # Make the long file name
#     kvpairs = []
#     for key, value in vars(args).items():
#         if key not in ['file', 'outfile']: 
#             kvpairs.append(key + ':' + str(value))

#     outswcfile = args.file + '_' + '_'.join(kvpairs) +'.swc'

# saveswc(outswcfile, swc)
