#!/usr/bin/python3

import sys
import json
import os
import subprocess
import argparse
import threading


class imgThread (threading.Thread):
    def __init__(self, imgid, img, method, root, sema):
        threading.Thread.__init__(self)
        self.imgid = imgid
        self.img = img
        self.method = method
        self.root = root
        self.sema = sema

    def run(self):
        print ("Starting " + self.method + ' on ' + self.name)
        self.sema.acquire()
        doimg(self.imgid, self.img, self.method, self.root)
        self.sema.release()
        print ('Exiting ' + self.name + ' with image ' + self.imgid)
        

def doimg(imgid, img, method, root):
    print('---- Working on image', imgid, 'with method ', method)
    if 'threshold' in img['misc']: 
        threshold = img['misc']['threshold']
    else:
        threshold = 0

    # Make the v3d safe cmd
    my_env = os.environ.copy()
    v3dcmd = "export DISPLAY=:30;Xvfb :30 -auth /dev/null & %s/vaa3d" % my_env['V3DPATH']

    if method == 'rivulet2':
        out = img['out'] if 'out' in img else img['imagepath'] + '.r2.swc'
        cmd = 'python3 rivulet2 --file %s --out %s' % (os.path.join(root, img['imagepath']), os.path.join(root, out))
        cmd += ' --threshold ' + str(threshold)
        cmd += ' --no-msfm ' # For now
        # Parameters for different methods
        if method in img['misc']:
            speed = img['misc'][method]['speed'] if 'speed' in img['misc'][method] else 'dt'
            ssmiter = img['misc'][method]['ssmiter'] if 'ssmiter' in img['misc'][method] else 40
            cmd += ' --speed %s --ssmiter %d' % (speed, ssmiter) + ' --silence '
    elif method == 'rivulet1':
        out = img['out'] if 'out' in img else img['imagepath'] + '.r1.swc'
        cmd = 'python3 rivulet1 --file %s --out %s' % (os.path.join(root, img['imagepath']), os.path.join(root, out))
        if 'threshold' in img['misc']: cmd += ' --' + 'threshold' + ' ' + str(img['misc']['threshold'])
        # Parameters for different methods
        if method in img['misc']:
            gap = img['misc'][method]['gap'] if 'gap' in img['misc'][method] else 150
            wiring = img['misc'][method]['wiring'] if 'wiring' in img['misc'][method] else 1.8
            length = img['misc'][method]['length'] if 'length' in img['misc'][method] else 4
            cmd += ' --gap %s --wiring %d --length %d' % (gap, wiring, length)
    elif method == 'ooffilter':
        out = img['out'] if 'out' in img else img['imagepath'] + '.oof.tif'
        cmd = 'python3 anifilter --file %s --out %s' % (os.path.join(root, img['imagepath']), os.path.join(root, out))
        if 'threshold' in img['misc']: cmd += ' --' + 'threshold' + ' ' + str(img['misc']['threshold'])
        # Parameters for different methods
        if method in img['misc']:
            rlow = img['misc'][method]['rlow'] if 'rlow' in img['misc'][method] else 1.0
            rhigh = img['misc'][method]['rhigh'] if 'rhigh' in img['misc'][method] else 2.0
            rstep = img['misc'][method]['rstep'] if 'rstep' in img['misc'][method] else 0.2
    elif method == 'rpp':
        out = os.path.splitext(img['out'] if 'out' in img else img['imagepath'])[0] + '.pp.tif'
        cmd = 'python3 rpp --file %s --out %s' % (os.path.join(root, img['imagepath']), os.path.join(root, out))
        # Parameters for different methods
        if method in img['misc']:
            pipeline = img['misc'][method]['pipeline'] if 'pipeline' in img['misc'][method] else 'T'
            sigma = img['misc'][method]['sigma'] if 'sigma' in img['misc'][method] else 1.0
            median_size = img['misc'][method]['median_size'] if 'median_size' in img['misc'][method] else 2.0
            ssmiter = img['misc'][method]['ssmiter'] if 'ssmiter' in img['misc'][method] else 20
            # threshold = img['misc'][method]['threshold'] if 'threshold' in img['misc'][method] else 0.0
            cmd += ' --sigma %f --median_size %f --threshold %f --pipeline %s --ssmiter %d' % (sigma, median_size, threshold, pipeline, ssmiter) 
    elif method == 'app2':
        out = img['out'] if 'out' in img else img['imagepath'] + '.app2.swc'
        cmd = v3dcmd + ' -x vn2 -f app2 -i ' + os.path.join(root, img['imagepath']) + ' -o ' + os.path.join(root, out) + ' -p  NULL 0 0 ' + str(threshold) + ' 1 1 1 4 0 0 0'
    elif method == 'smart':
        out = img['out'] if 'out' in img else img['imagepath'] + '.smart.swc'
        cmd = v3dcmd + ' -x smartTrace -f smartTrace -i ' + os.path.join(root, img['imagepath']) + ' -o ' + os.path.join(root, out)
    else:
        raise Exception('Method %s not implemented yet' % method)
        
    if 'groundtruth' in img and method in ('rivulet2', 'rivulet1', 'app2'): 
        comparecmd = 'python3 compareswc --target %s --groundtruth %s' % (os.path.join(root, out), os.path.join(root, img['groundtruth']))
    else:
        comparecmd = ''

    print(cmd)
    subprocess.run(cmd, shell=True, check=True)


def tracejsonfile(fpath, pbsfile=None, method='rivulet2', nthread=1):

    sema = threading.BoundedSemaphore(value=nthread)

    with open(fpath) as f:
        dataidx = json.load(f)

    root = dataidx['rootpath']
    if not os.path.isabs(root): # Make the root path absolute if it is not yet
        root = os.path.join(os.path.dirname(os.path.abspath(fpath)), root)

    thpool = []
    for datasetname, dataset in dataidx['data'].items():
        print('-- Working on dataset', datasetname)
        for imgid, img in dataset.items():
            th = imgThread(imgid, img, method, root, sema)
            th.start()
    for th in thpool:
        th.join()

    print('--rjson finished')

parser = argparse.ArgumentParser(description='Arguments for tracing files index with a .json file.')
parser.add_argument('-f', '--file', type=str, default=None, required=True, help='The input json file. Pls see ./tests/data/test.json for example.')
parser.add_argument('--method', type=str, default='rivulet2', required=False, help='The method to use (rivulet2/rivulet1/app2) ')
parser.add_argument('--pbsfile', type=str, default=None, required=False, help='The pbs file to run. Required if --pbs written.')
parser.add_argument('--thread', type=int, default=1, required=False, help='The number of threads to parallelise the tasks. Default 1')
args = parser.parse_args()
tracejsonfile(args.file, args.pbsfile, method=args.method, nthread=args.thread)
