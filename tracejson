#!/usr/bin/python3

import sys
import json
import os
import argparse

def tracejsonfile(fpath, pbsfile=None, method='rivulet2'):
    with open(fpath) as f:
        dataidx = json.load(f)

    root = dataidx['rootpath']
    if not os.path.isabs(root): # Make the root path absolute if it is not yet
        root = os.path.join(os.path.dirname(os.path.abspath(fpath)), root)

    for datasetname, dataset in dataidx['data'].items():
        print('-- Working on dataset', datasetname)
        for imgid, img in dataset.items():
            print('---- Working on image', imgid)
            if method is 'rivulet2':
                outpath = img['outpath'] if 'outpath' in img else img['imagepath'] + '.r2.swc'
                cmd = 'python3 rivulet2 --file %s --outfile %s' % (os.path.join(root, img['imagepath']), os.path.join(root, outpath))
                if 'threshold' in img['misc']: cmd += ' --' + 'threshold' + ' ' + str(img['misc']['threshold'])
                # Parameters for different methods
                if 'rivulet2' in img['misc']:
                    speed = img['misc']['rivulet2']['speed'] if 'speed' in img['misc']['rivulet2'] else 'dt'
                    ssmiter = img['misc']['rivulet2']['ssmiter'] if 'ssmiter' in img['misc']['rivulet2'] else 40
                    cmd += ' --speed %s --ssmiter %d' % (speed, ssmiter)

            else:
                raise Exception('Method %s not implemented yet' % method)
                
            if 'groundtruth' in img: 
                comparecmd = 'python3 compareswc --target %s --groundtruth %s' % (os.path.join(root, outpath), os.path.join(root, img['groundtruth']))
            else:
                comparecmd = ''

            if pbsfile is not None: # Add the options for pbs 
                cmd = 'qsub -N %s -v rivuletcmd=\'%s\',comparecmd=\'%s\' %s' % (str(imgid), cmd, comparecmd, pbsfile)
            else:
                cmd += comparecmd
                
            print(cmd)
            os.system(cmd)

parser = argparse.ArgumentParser(description='Arguments for tracing files index with a .json file.')
parser.add_argument('--file', type=str, default=None, required=True, help='The input json file. Pls see ./tests/data/test.json for example.')
parser.add_argument('--method', type=str, default='rivulet2', required=False, help='The method to use (rivulet2/rivulet1/app2) ')
parser.add_argument('--pbsfile', type=str, default=None, required=False, help='The pbs file to run. Required if --pbs written.')
args = parser.parse_args()
tracejsonfile(args.file, args.pbsfile, method=args.method)
